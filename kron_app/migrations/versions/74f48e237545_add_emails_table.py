"""Add emails table.

Revision ID: 74f48e237545
Revises: 9697623bdb65
Create Date: 2022-08-09 20:11:59.502085

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '74f48e237545'
down_revision = '9697623bdb65'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Turn invites into emails:
    op.rename_table('invites', 'emails')
    op.alter_column('emails', 'email', new_column_name='address')
    op.add_column('emails', sa.Column('invite', sa.Boolean(), nullable=True))
    op.execute('UPDATE emails SET invite = true;')
    op.alter_column('emails', 'invite', nullable=False)
    op.add_column('emails', sa.Column('user_id', sa.Integer(), nullable=True))
    op.create_foreign_key('emails_user_id_fkey', 'emails', 'users', ['user_id'], ['id'])
    op.alter_column('emails', 'uid', nullable=True)
    op.add_column('emails', sa.Column('tokens', sa.Text(), nullable=True))
    op.execute('ALTER SEQUENCE invites_id_seq RENAME TO emails_id_seq')
    op.execute('ALTER INDEX invites_pkey RENAME TO emails_pkey')
    op.execute('ALTER INDEX invites_email_key RENAME TO emails_address_key')
    op.execute('ALTER INDEX invites_uid_key RENAME TO emails_uid_key')

    # Make rows in emails table from emails in users table:
    op.execute('INSERT INTO emails (address, user_id, declined, invite, created_at) '
               "SELECT email, users.id, ARRAY[]::integer[], false, created_at FROM users "
               'ON CONFLICT DO NOTHING;') # email address might already exist as invite

    # Where email already exists because of invite, we still need to hook up `emails.user_id`.
    op.execute('UPDATE emails SET user_id = users.id FROM users WHERE emails.address = users.email AND emails.user_id IS NULL;')

    # Add fkey to users:
    op.add_column('users', sa.Column('primary_email_id', sa.Integer(), nullable=True))
    op.execute('UPDATE users SET primary_email_id = emails.id FROM emails WHERE users.email = emails.address;')
    op.alter_column('users', 'primary_email_id', nullable=False)
    op.create_foreign_key('users_primary_email_id_fkey', 'users', 'emails', ['primary_email_id'], ['id'])

    # Drop existing email column.
    op.drop_column('users', 'email')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Restore email column on users:
    op.add_column('users', sa.Column('email', sa.String(length=100), nullable=True))
    op.create_unique_constraint('users_email_key', 'users', ['email'])
    # Populate from emails table:
    op.execute('UPDATE users SET email = emails.address FROM emails WHERE users.primary_email_id = emails.id;')
    op.alter_column('users', 'email', nullable=False)

    # Drop fkey:
    op.drop_constraint('users_primary_email_id_fkey', 'users', type_='foreignkey')
    op.drop_column('users', 'primary_email_id')

    # Turn emails back into invites:
    op.execute('ALTER SEQUENCE emails_id_seq RENAME TO invites_id_seq')
    op.execute('ALTER INDEX emails_pkey RENAME TO invites_pkey')
    op.execute('ALTER INDEX emails_address_key RENAME TO invites_email_key')
    op.execute('ALTER INDEX emails_uid_key RENAME TO invites_uid_key')
    op.execute('DELETE FROM emails WHERE invite = false;')
    op.drop_column('emails', 'tokens')
    op.alter_column('emails', 'uid', nullable=False)
    op.drop_constraint('emails_user_id_fkey', 'emails', type_='foreignkey')
    op.drop_column('emails', 'user_id')
    op.drop_column('emails', 'invite')
    op.alter_column('emails', 'address', new_column_name='email')
    op.rename_table('emails', 'invites')

    # ### end Alembic commands ###
